# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface listSearch {
    page: Int
    rows_per_page: Int
    sort_type: String
}

type Category {
    c2_id: String
    c2_name: String
    c2_number: String
    c3_id: String
    c3_name: String
    c3_number: String
    create_time: Date
    full_parent_id: String
    id: String
    img_url: String
    is_delete: Boolean
    is_enable: Int
    name: String
    number: Int
    p2_id: String
    p2_name: String
    p3_id: String
    p3_name: String
    parent_id: String
    remark: String
    sort: Int
    update_time: Date
}

type Mutation {
    addToShopCart(ShopCartInput: ShopCartInput): result
    changePassword(data: ChangePassword!): String
    deleteOneUser(id: String!): String
    importAllUser(data: String!): String
    remove_shop_cart(id: String!): result
    save_category(Category: CategoryInput): result
    save_product(ProductInput: ProductInput): result
    save_shop_cart(SaveShopCartInput: SaveShopCartInput): result
    updateUser(data: UserInput!): User
    updateUserAuth(auth: String!, id: String!): String
}

type Order {
    create_time: Date
    id: String
    name: String
    update_time: Date
}

type Product {
    brand: String
    c1_id: String
    c1_name: String
    c1_number: String
    c2_id: String
    c2_name: String
    c2_number: String
    c3_id: String
    c3_name: String
    c3_number: String
    category_id: String
    create_time: Date
    id: String
    imgs: [ProductImg]
    is_delete: Boolean
    is_enable: Int
    is_hot: Int
    is_new: Int
    name: String
    number: Int
    price_in: Float
    price_market: Float
    price_out: Float
    remark: String
    sort: Int
    stock: Float
    unit: String
    update_time: Date
    weight: Float
}

type ProductImg {
    id: String
    name: String
    number: Int
    product_id: String
    url: String
}

type Query {
    allDataUser: String
    allUser(data: UserInput): [User]
    category_list(CategoryInput: CategoryInput): [Category]
    category_origin(id: String): Category
    category_total(CategoryInput: CategoryInput): Int
    getPassCode(pass: String!): String
    oneUser(id: String!): User
    order_list(id: String): [Order]
    product_list(ListInput: ProductInput): [Product]
    product_total(ListInput: ProductInput): Int
    shop_cart_list(ShopCartInput: ShopCartInput): [ShopCart]
    totalUser(data: UserInput): Int
    user: [User]
    user_coin: UserCoin
    user_info: User
}

type ShopCart {
    create_time: Date
    id: String
    is_next: Int
    name: String
    number: Int
    product: Product
    product_id: String
    update_time: Date
}

type User {
    create_time: Date
    email: String
    id: String
    name: String
    phone: String
    type: String
    update_time: Date
    user_name: String
}

type UserCoin {
    card_number: Int
    current_mouth_icons: Float
    next_mouth_icons: Float
}

type result {
    category: Category
    flag: Int
    msg: String
    product: Product
    shopCart: ShopCart
}

input CategoryInput {
    create_time: Date
    full_parent_id: String
    id: String
    img_url: String
    is_delete: Boolean
    is_enable: Int
    name: String
    number: Int
    origin_category_id: String
    page: Int
    parent_id: String
    remark: String
    rows_per_page: Int
    sort: Int
    sort_type: String
    update_time: Date
    user_id: String
}

input ChangePassword {
    id: String
    newPass: String
    verification: String
}

input OrderListInput {
    id: String
}

input ProductImgInput {
    id: String
    name: String
    number: Int
    url: String
}

input ProductInput {
    brand: String
    category_id: String
    create_time: Date
    id: String
    imgs: [ProductImgInput]
    is_delete: Boolean
    is_enable: Int
    is_hot: Int
    is_new: Int
    name: String
    number: Int
    origin_category_id: String
    page: Int
    price_in: Float
    price_market: Float
    price_out: Float
    remark: String
    rows_per_page: Int
    sort: Int
    sort_type: String
    stock: Float
    unit: String
    update_time: Date
    user_id: String
    weight: Float
}

input SaveShopCartInput {
    id: String!
    is_next: Int!
    number: Int!
    product_id: String
}

input ShopCartInput {
    id: String
    is_next: Int
    number: Int
    product_id: String
}

input UserInput {
    auth: String
    id: String
    message: String
    name: String
    page: Int
    rowsPerPage: Int
    sortData: UserSortInput
}

input UserSortInput {
    code: Int
}


"Date custom scalar type"
scalar Date
